// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    password      String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    DishLikes     DishLikes[]
    Comments      Comments[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model DishLikes {
    id         Int      @id @default(autoincrement())
    dish_id    Int
    user_id    String
    created_at DateTime @default(now()) @db.Timestamp(6)
    dishes     Dishes   @relation(fields: [dish_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Dishes {
    id          Int          @id @default(autoincrement())
    name        String       @db.VarChar(255)
    cuisine     String       @db.VarChar(255)
    slug        String       @db.VarChar(255)
    url         String       @db.VarChar(255)
    ingredients Ingredient[]
    recipes     Recipe?
    likes       Int          @default(0)
    DishLikes   DishLikes[]
    post        Posts?
}

model Comments {
    id         Int        @id @default(autoincrement())
    post_id    Int?
    body       String
    created_at DateTime?  @default(now()) @db.Timestamp(6)
    user_id    String
    user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    posts      Posts?     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parent_id  Int? // New field to represent the parent comment's ID
    parent     Comments?  @relation("Replies", fields: [parent_id], references: [id])
    replies    Comments[] @relation("Replies") // Opposite relation field for replies
}

model Posts {
    id         Int        @id @default(autoincrement())
    comments   Comments[]
    dish       Dishes     @relation(fields: [dish_id], references: [id])
    dish_id    Int        @unique
}

model Ingredient {
    id          Int    @id @default(autoincrement())
    amount      Int
    name        String
    measureUnit String
    dishId      Int
    dish        Dishes @relation(fields: [dishId], references: [id])
}

model Recipe {
    id     Int      @id @default(autoincrement())
    step   String[]
    dishId Int      @unique
    dish   Dishes   @relation(fields: [dishId], references: [id])
}
